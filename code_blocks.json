["javascript\nvar esprima = require('esprima');\nJSON.stringify(esprima.parse(js_string), null, 2);\n", "python\nimport json\n\nimport visitor\n\nast = json.loads(esprima_ast_string)\nprogram = visitor.objectify(ast)  # visitor.Node object\n\nfor node in program.traverse():\n    print(node.type)\n    # Replace all return statements with 'return null'\n    if node.type == 'ReturnStatement':\n        node.argument = None\n\n# Save modified tree back to JSON format\nwith open('modified_ast.json', 'w') as f:\n    f.write(json.dumps(node.dict(), indent=2))\n", "python\nnode = visitor.objectify('your-json-ast-string')\n\nnode.fields      # List of available attributes for this specific node (e.g. ['key', 'value']).\n                 #     Node fields can be accessed directly (e.g. node.key, node.value)\nnode.type        # Class name (e.g. \"Program\" or \"VariableDeclarator\")\nnode.dict()      # Transform Node back into an AST dictionary\nnode.traverse()  # Pre-order traversal of this node and its children (which may also be Node objects)\n", "js\nvar map = {'abc': 123}\n", "bash\n$ npm install esprima\n$ node\n> var esprima = require('esprima');\n> var fs = require('fs');\n> ast_string = JSON.stringify(esprima.parse(\"var map = {'abc': 123}\"), null, 2);\n> fs.writeFile('test.json', ast_string, null);\n", "python\nimport json\nimport visitor  # references visitor.py in this repo\n\nwith open('test.json') as f:\n    ast = json.loads(f.read())\n    \nprogram = visitor.objectify(ast)  # visitor.Node object\n", "\nProgram\n    .body: [VariableDeclaration]\n        .declarations: [VariableDeclarator]\n            .id: Identifier\n                .name: \"map\"\n            .init: ObjectExpression\n                .properties: [Property]\n                    .key: Literal\n                        .value: \"abc\"\n                    .value: Literal\n                        .value: 123\n", "python\nobject_exp = program.body[0].declarations[0].init  # ObjectExpression\nobject_exp.properties[0].key.value = \"new-key\"\n\n# Write out the modified AST\nwith open('test-modified.json', 'w') as f:\n    f.write(json.dumps(program.dict(), indent=2))\n", "bash\n\n$ virtualenv -p python3 venv\n$ source venv/bin/activate\n$ pip3 install -r requirements.txt\n$ coverage run visitor_test.py  # Unit tests\n$ coverage report  # Should show 100%\n$ find . -name '*.py' -not -path './venv/*' -exec pylint '{}' +\n$ mypy .  # Static type-checking\n"]