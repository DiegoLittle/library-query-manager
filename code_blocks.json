["bash\ncurl -sL install-node.vercel.app/lts | bash\n", "vim\n\" Use release branch (recommend)\nPlug 'neoclide/coc.nvim', {'branch': 'release'}\n\n\" Or build from source code by using yarn: https://yarnpkg.com\nPlug 'neoclide/coc.nvim', {'branch': 'master', 'do': 'yarn install --frozen-lockfile'}\n", "json\n{\n  \"languageserver\": {\n    \"go\": {\n      \"command\": \"gopls\",\n      \"rootPatterns\": [\"go.mod\"],\n      \"trace.server\": \"verbose\",\n      \"filetypes\": [\"go\"]\n    }\n  }\n}\n", "vim\n\n\" May need for vim (not neovim) since coc.nvim calculate byte offset by count\n\" utf-8 byte sequence.\nset encoding=utf-8\n\" Some servers have issues with backup files, see #649.\nset nobackup\nset nowritebackup\n\n\" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable\n\" delays and poor user experience.\nset updatetime=300\n\n\" Always show the signcolumn, otherwise it would shift the text each time\n\" diagnostics appear/become resolved.\nset signcolumn=yes\n\n\" Use tab for trigger completion with characters ahead and navigate.\n\" NOTE: There's always complete item selected by default, you may want to enable\n\" no select by `\"suggest.noselect\": true` in your configuration file.\n\" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by\n\" other plugin before putting this into your config.\ninoremap <silent><expr> <TAB>\n      \\ coc#pum#visible() ? coc#pum#next(1) :\n      \\ CheckBackspace() ? \"\\<Tab>\" :\n      \\ coc#refresh()\ninoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : \"\\<C-h>\"\n\n\" Make <CR> to accept selected completion item or notify coc.nvim to format\n\" <C-g>u breaks current undo, please make your own choice.\ninoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()\n                              \\: \"\\<C-g>u\\<CR>\\<c-r>=coc#on_enter()\\<CR>\"\n\nfunction! CheckBackspace() abort\n  let col = col('.') - 1\n  return !col || getline('.')[col - 1]  =~# '\\s'\nendfunction\n\n\" Use <c-space> to trigger completion.\nif has('nvim')\n  inoremap <silent><expr> <c-space> coc#refresh()\nelse\n  inoremap <silent><expr> <c-@> coc#refresh()\nendif\n\n\" Use `[g` and `]g` to navigate diagnostics\n\" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.\nnmap <silent> [g <Plug>(coc-diagnostic-prev)\nnmap <silent> ]g <Plug>(coc-diagnostic-next)\n\n\" GoTo code navigation.\nnmap <silent> gd <Plug>(coc-definition)\nnmap <silent> gy <Plug>(coc-type-definition)\nnmap <silent> gi <Plug>(coc-implementation)\nnmap <silent> gr <Plug>(coc-references)\n\n\" Use K to show documentation in preview window.\nnnoremap <silent> K :call ShowDocumentation()<CR>\n\nfunction! ShowDocumentation()\n  if CocAction('hasProvider', 'hover')\n    call CocActionAsync('doHover')\n  else\n    call feedkeys('K', 'in')\n  endif\nendfunction\n\n\" Highlight the symbol and its references when holding the cursor.\nautocmd CursorHold * silent call CocActionAsync('highlight')\n\n\" Symbol renaming.\nnmap <leader>rn <Plug>(coc-rename)\n\n\" Formatting selected code.\nxmap <leader>f  <Plug>(coc-format-selected)\nnmap <leader>f  <Plug>(coc-format-selected)\n\naugroup mygroup\n  autocmd!\n  \" Setup formatexpr specified filetype(s).\n  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')\n  \" Update signature help on jump placeholder.\n  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')\naugroup end\n\n\" Applying codeAction to the selected region.\n\" Example: `<leader>aap` for current paragraph\nxmap <leader>a  <Plug>(coc-codeaction-selected)\nnmap <leader>a  <Plug>(coc-codeaction-selected)\n\n\" Remap keys for applying codeAction to the current buffer.\nnmap <leader>ac  <Plug>(coc-codeaction)\n\" Apply AutoFix to problem on the current line.\nnmap <leader>qf  <Plug>(coc-fix-current)\n\n\" Run the Code Lens action on the current line.\nnmap <leader>cl  <Plug>(coc-codelens-action)\n\n\" Map function and class text objects\n\" NOTE: Requires 'textDocument.documentSymbol' support from the language server.\nxmap if <Plug>(coc-funcobj-i)\nomap if <Plug>(coc-funcobj-i)\nxmap af <Plug>(coc-funcobj-a)\nomap af <Plug>(coc-funcobj-a)\nxmap ic <Plug>(coc-classobj-i)\nomap ic <Plug>(coc-classobj-i)\nxmap ac <Plug>(coc-classobj-a)\nomap ac <Plug>(coc-classobj-a)\n\n\" Remap <C-f> and <C-b> for scroll float windows/popups.\nif has('nvim-0.4.0') || has('patch-8.2.0750')\n  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : \"\\<C-f>\"\n  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : \"\\<C-b>\"\n  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? \"\\<c-r>=coc#float#scroll(1)\\<cr>\" : \"\\<Right>\"\n  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? \"\\<c-r>=coc#float#scroll(0)\\<cr>\" : \"\\<Left>\"\n  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : \"\\<C-f>\"\n  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : \"\\<C-b>\"\nendif\n\n\" Use CTRL-S for selections ranges.\n\" Requires 'textDocument/selectionRange' support of language server.\nnmap <silent> <C-s> <Plug>(coc-range-select)\nxmap <silent> <C-s> <Plug>(coc-range-select)\n\n\" Add `:Format` command to format current buffer.\ncommand! -nargs=0 Format :call CocActionAsync('format')\n\n\" Add `:Fold` command to fold current buffer.\ncommand! -nargs=? Fold :call     CocAction('fold', <f-args>)\n\n\" Add `:OR` command for organize imports of the current buffer.\ncommand! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')\n\n\" Add (Neo)Vim's native statusline support.\n\" NOTE: Please see `:h coc-status` for integrations with external plugins that\n\" provide custom statusline: lightline.vim, vim-airline.\nset statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}\n\n\" Mappings for CoCList\n\" Show all diagnostics.\nnnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>\n\" Manage extensions.\nnnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>\n\" Show commands.\nnnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>\n\" Find symbol of current document.\nnnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>\n\" Search workspace symbols.\nnnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>\n\" Do default action for next item.\nnnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>\n\" Do default action for previous item.\nnnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>\n\" Resume latest coc list.\nnnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>\n", "lua\n-- Some servers have issues with backup files, see #649.\nvim.opt.backup = false\nvim.opt.writebackup = false\n\n-- Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable\n-- delays and poor user experience.\nvim.opt.updatetime = 300\n\n-- Always show the signcolumn, otherwise it would shift the text each time\n-- diagnostics appear/become resolved.\nvim.opt.signcolumn = \"yes\"\n\nlocal keyset = vim.keymap.set\n-- Auto complete\nfunction _G.check_back_space()\n    local col = vim.fn.col('.') - 1\n    return col == 0 or vim.fn.getline('.'):sub(col, col):match('%s') ~= nil\nend\n\n-- Use tab for trigger completion with characters ahead and navigate.\n-- NOTE: There's always complete item selected by default, you may want to enable\n-- no select by `\"suggest.noselect\": true` in your configuration file.\n-- NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by\n-- other plugin before putting this into your config.\nlocal opts = {silent = true, noremap = true, expr = true, replace_keycodes = false}\nkeyset(\"i\", \"<TAB>\", 'coc#pum#visible() ? coc#pum#next(1) : v:lua.check_back_space() ? \"<TAB>\" : coc#refresh()', opts)\nkeyset(\"i\", \"<S-TAB>\", [[coc#pum#visible() ? coc#pum#prev(1) : \"\\<C-h>\"]], opts)\n\n-- Make <CR> to accept selected completion item or notify coc.nvim to format\n-- <C-g>u breaks current undo, please make your own choice.\nkeyset(\"i\", \"<cr>\", [[coc#pum#visible() ? coc#pum#confirm() : \"\\<C-g>u\\<CR>\\<c-r>=coc#on_enter()\\<CR>\"]], opts)\n\n-- Use <c-j> to trigger snippets\nkeyset(\"i\", \"<c-j>\", \"<Plug>(coc-snippets-expand-jump)\")\n-- Use <c-space> to trigger completion.\nkeyset(\"i\", \"<c-space>\", \"coc#refresh()\", {silent = true, expr = true})\n\n-- Use `[g` and `]g` to navigate diagnostics\n-- Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.\nkeyset(\"n\", \"[g\", \"<Plug>(coc-diagnostic-prev)\", {silent = true})\nkeyset(\"n\", \"]g\", \"<Plug>(coc-diagnostic-next)\", {silent = true})\n\n-- GoTo code navigation.\nkeyset(\"n\", \"gd\", \"<Plug>(coc-definition)\", {silent = true})\nkeyset(\"n\", \"gy\", \"<Plug>(coc-type-definition)\", {silent = true})\nkeyset(\"n\", \"gi\", \"<Plug>(coc-implementation)\", {silent = true})\nkeyset(\"n\", \"gr\", \"<Plug>(coc-references)\", {silent = true})\n\n\n-- Use K to show documentation in preview window.\nfunction _G.show_docs()\n    local cw = vim.fn.expand('<cword>')\n    if vim.fn.index({'vim', 'help'}, vim.bo.filetype) >= 0 then\n        vim.api.nvim_command('h ' .. cw)\n    elseif vim.api.nvim_eval('coc#rpc#ready()') then\n        vim.fn.CocActionAsync('doHover')\n    else\n        vim.api.nvim_command('!' .. vim.o.keywordprg .. ' ' .. cw)\n    end\nend\nkeyset(\"n\", \"K\", '<CMD>lua _G.show_docs()<CR>', {silent = true})\n\n\n-- Highlight the symbol and its references when holding the cursor.\nvim.api.nvim_create_augroup(\"CocGroup\", {})\nvim.api.nvim_create_autocmd(\"CursorHold\", {\n    group = \"CocGroup\",\n    command = \"silent call CocActionAsync('highlight')\",\n    desc = \"Highlight symbol under cursor on CursorHold\"\n})\n\n\n-- Symbol renaming.\nkeyset(\"n\", \"<leader>rn\", \"<Plug>(coc-rename)\", {silent = true})\n\n\n-- Formatting selected code.\nkeyset(\"x\", \"<leader>f\", \"<Plug>(coc-format-selected)\", {silent = true})\nkeyset(\"n\", \"<leader>f\", \"<Plug>(coc-format-selected)\", {silent = true})\n\n\n-- Setup formatexpr specified filetype(s).\nvim.api.nvim_create_autocmd(\"FileType\", {\n    group = \"CocGroup\",\n    pattern = \"typescript,json\",\n    command = \"setl formatexpr=CocAction('formatSelected')\",\n    desc = \"Setup formatexpr specified filetype(s).\"\n})\n\n-- Update signature help on jump placeholder.\nvim.api.nvim_create_autocmd(\"User\", {\n    group = \"CocGroup\",\n    pattern = \"CocJumpPlaceholder\",\n    command = \"call CocActionAsync('showSignatureHelp')\",\n    desc = \"Update signature help on jump placeholder\"\n})\n\n\n-- Applying codeAction to the selected region.\n-- Example: `<leader>aap` for current paragraph\nlocal opts = {silent = true, nowait = true}\nkeyset(\"x\", \"<leader>a\", \"<Plug>(coc-codeaction-selected)\", opts)\nkeyset(\"n\", \"<leader>a\", \"<Plug>(coc-codeaction-selected)\", opts)\n\n-- Remap keys for applying codeAction to the current buffer.\nkeyset(\"n\", \"<leader>ac\", \"<Plug>(coc-codeaction)\", opts)\n\n\n-- Apply AutoFix to problem on the current line.\nkeyset(\"n\", \"<leader>qf\", \"<Plug>(coc-fix-current)\", opts)\n\n\n-- Run the Code Lens action on the current line.\nkeyset(\"n\", \"<leader>cl\", \"<Plug>(coc-codelens-action)\", opts)\n\n\n-- Map function and class text objects\n-- NOTE: Requires 'textDocument.documentSymbol' support from the language server.\nkeyset(\"x\", \"if\", \"<Plug>(coc-funcobj-i)\", opts)\nkeyset(\"o\", \"if\", \"<Plug>(coc-funcobj-i)\", opts)\nkeyset(\"x\", \"af\", \"<Plug>(coc-funcobj-a)\", opts)\nkeyset(\"o\", \"af\", \"<Plug>(coc-funcobj-a)\", opts)\nkeyset(\"x\", \"ic\", \"<Plug>(coc-classobj-i)\", opts)\nkeyset(\"o\", \"ic\", \"<Plug>(coc-classobj-i)\", opts)\nkeyset(\"x\", \"ac\", \"<Plug>(coc-classobj-a)\", opts)\nkeyset(\"o\", \"ac\", \"<Plug>(coc-classobj-a)\", opts)\n\n\n-- Remap <C-f> and <C-b> for scroll float windows/popups.\n---@diagnostic disable-next-line: redefined-local\nlocal opts = {silent = true, nowait = true, expr = true}\nkeyset(\"n\", \"<C-f>\", 'coc#float#has_scroll() ? coc#float#scroll(1) : \"<C-f>\"', opts)\nkeyset(\"n\", \"<C-b>\", 'coc#float#has_scroll() ? coc#float#scroll(0) : \"<C-b>\"', opts)\nkeyset(\"i\", \"<C-f>\",\n       'coc#float#has_scroll() ? \"<c-r>=coc#float#scroll(1)<cr>\" : \"<Right>\"', opts)\nkeyset(\"i\", \"<C-b>\",\n       'coc#float#has_scroll() ? \"<c-r>=coc#float#scroll(0)<cr>\" : \"<Left>\"', opts)\nkeyset(\"v\", \"<C-f>\", 'coc#float#has_scroll() ? coc#float#scroll(1) : \"<C-f>\"', opts)\nkeyset(\"v\", \"<C-b>\", 'coc#float#has_scroll() ? coc#float#scroll(0) : \"<C-b>\"', opts)\n\n\n-- Use CTRL-S for selections ranges.\n-- Requires 'textDocument/selectionRange' support of language server.\nkeyset(\"n\", \"<C-s>\", \"<Plug>(coc-range-select)\", {silent = true})\nkeyset(\"x\", \"<C-s>\", \"<Plug>(coc-range-select)\", {silent = true})\n\n\n-- Add `:Format` command to format current buffer.\nvim.api.nvim_create_user_command(\"Format\", \"call CocAction('format')\", {})\n\n-- \" Add `:Fold` command to fold current buffer.\nvim.api.nvim_create_user_command(\"Fold\", \"call CocAction('fold', <f-args>)\", {nargs = '?'})\n\n-- Add `:OR` command for organize imports of the current buffer.\nvim.api.nvim_create_user_command(\"OR\", \"call CocActionAsync('runCommand', 'editor.action.organizeImport')\", {})\n\n-- Add (Neo)Vim's native statusline support.\n-- NOTE: Please see `:h coc-status` for integrations with external plugins that\n-- provide custom statusline: lightline.vim, vim-airline.\nvim.opt.statusline:prepend(\"%{coc#status()}%{get(b:,'coc_current_function','')}\")\n\n-- Mappings for CoCList\n-- code actions and coc stuff\n---@diagnostic disable-next-line: redefined-local\nlocal opts = {silent = true, nowait = true}\n-- Show all diagnostics.\nkeyset(\"n\", \"<space>a\", \":<C-u>CocList diagnostics<cr>\", opts)\n-- Manage extensions.\nkeyset(\"n\", \"<space>e\", \":<C-u>CocList extensions<cr>\", opts)\n-- Show commands.\nkeyset(\"n\", \"<space>c\", \":<C-u>CocList commands<cr>\", opts)\n-- Find symbol of current document.\nkeyset(\"n\", \"<space>o\", \":<C-u>CocList outline<cr>\", opts)\n-- Search workspace symbols.\nkeyset(\"n\", \"<space>s\", \":<C-u>CocList -I symbols<cr>\", opts)\n-- Do default action for next item.\nkeyset(\"n\", \"<space>j\", \":<C-u>CocNext<cr>\", opts)\n-- Do default action for previous item.\nkeyset(\"n\", \"<space>k\", \":<C-u>CocPrev<cr>\", opts)\n-- Resume latest coc list.\nkeyset(\"n\", \"<space>p\", \":<C-u>CocListResume<cr>\", opts)\n"]